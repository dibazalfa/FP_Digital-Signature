# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tucil-3-KriptoKoding.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from Tanda_Tangan import *
from Pembangkitan_Kunci import *
from Baca_File import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(709, 547)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 30, 441, 81))
        self.label.setObjectName("label")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(40, 130, 651, 361))
        self.tabWidget.setObjectName("tabWidget")
        self.generate = QtWidgets.QWidget()
        self.generate.setObjectName("generate")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.generate)
        self.plainTextEdit.setGeometry(QtCore.QRect(230, 120, 301, 41))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_2 = QtWidgets.QLabel(self.generate)
        self.label_2.setGeometry(QtCore.QRect(75, 130, 150, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.generate)
        self.label_3.setGeometry(QtCore.QRect(230, 40, 190, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.generate)
        self.pushButton.setGeometry(QtCore.QRect(250, 220, 121, 41))
        self.pushButton.setObjectName("pushButton")
        self.tabWidget.addTab(self.generate, "")
        self.sign = QtWidgets.QWidget()
        self.sign.setEnabled(True)
        self.sign.setMouseTracking(True)
        self.sign.setAccessibleName("")
        self.sign.setAutoFillBackground(True)
        self.sign.setObjectName("sign")
        self.label_4 = QtWidgets.QLabel(self.sign)
        self.label_4.setGeometry(QtCore.QRect(250, 50, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.sign)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 230, 121, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_5 = QtWidgets.QLabel(self.sign)
        self.label_5.setGeometry(QtCore.QRect(70, 120, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.sign)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(170, 110, 301, 41))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.label_6 = QtWidgets.QLabel(self.sign)
        self.label_6.setGeometry(QtCore.QRect(70, 170, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.sign)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(170, 160, 301, 41))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.sign)
        self.pushButton_4.setGeometry(QtCore.QRect(490, 120, 75, 24))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.sign)
        self.pushButton_5.setGeometry(QtCore.QRect(490, 170, 75, 24))
        self.pushButton_5.setObjectName("pushButton_5")
        self.tabWidget.addTab(self.sign, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.genkey)
        self.pushButton_2.clicked.connect(self.gensign)
        self.pushButton_4.clicked.connect(self.browsefile)
        self.pushButton_5.clicked.connect(self.browseprivate)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt;\">Digital Signature (CA)</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "Nama File Output"))
        self.label_3.setText(_translate("MainWindow", "RSA Key Generate"))
        self.pushButton.setText(_translate("MainWindow", "GENERATE KEY"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.generate), _translate("MainWindow", "Generate Key"))
        self.label_4.setText(_translate("MainWindow", "File Digital Sign"))
        self.pushButton_2.setText(_translate("MainWindow", "SIGN FILE"))
        self.label_5.setText(_translate("MainWindow", "File Input"))
        self.label_6.setText(_translate("MainWindow", "Private Key"))
        self.pushButton_4.setText(_translate("MainWindow", "Browse"))
        self.pushButton_5.setText(_translate("MainWindow", "Browse"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.sign), _translate("MainWindow", "Digital Sign"))

    def clicker(self):
        fname = QFileDialog.getOpenFileName(
            parent = MainWindow, 
            caption = "Open File",
            directory = "", 
            filter = "All Files (*)")
        if fname:
            return fname[0]
    
    def genkey(self):
        filename = self.plainTextEdit.toPlainText()
        writeKey(filename)
        self.popupnotifbiasa("Kunci telah berhasil dibuat")

    def gensign(self):
        filename = self.plainTextEdit_2.toPlainText()
        privatekey = self.plainTextEdit_3.toPlainText()
        if filename == "" or privatekey == "":
            self.popupnotiferror("File dan private key tidak boleh kosong!")
        elif Baca_File.fileext(filename)!=".pdf":
            self.popupnotiferror("File harus .pdf") 
        else:    
            if self.prikeychecker(privatekey)==True:
                generateDigitalSigned(filename, privatekey)
                self.popupnotifbiasa("File berhasil ditandatangani")
            else:
                self.popupnotiferror("Masukkan kunci private (dengan file .pri)!")

    def browsefile(self):
        link = self.clicker()
        self.plainTextEdit_2.setPlainText(link)    

    def browseprivate(self):
        link = self.clicker()
        self.plainTextEdit_3.setPlainText(link)    
   

    def popupnotifbiasa(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Information)

        x = msg.exec_()

    def popupnotifwarning(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Warning)

        x = msg.exec_()

    def popupnotiferror(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Critical)

        x = msg.exec_()    

    def pubkeychecker(self, file):
        if Baca_File.fileext(file) == ".pub":
            return True
        else:
            return False

    def prikeychecker(self, file):
        if Baca_File.fileext(file) == ".pri":
            return True
        else:
            return False

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    '''
QmessageBox.Ok
    '''
