# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tucil-3-KriptoKoding2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from Tanda_Tangan import *
from Pembangkitan_Kunci import *
from Baca_File import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(709, 547)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(110, 30, 500, 81))
        self.label.setObjectName("label")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(520, 330, 75, 24))
        self.pushButton_8.setObjectName("pushButton_8")
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_5.setGeometry(QtCore.QRect(200, 210, 301, 41))
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(105, 330, 80, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(300, 400, 121, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.plainTextEdit_6 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_6.setGeometry(QtCore.QRect(200, 320, 301, 41))
        self.plainTextEdit_6.setObjectName("plainTextEdit_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(105, 270, 80, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(105, 220, 80, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(520, 220, 75, 24))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(520, 270, 75, 24))
        self.pushButton_6.setObjectName("pushButton_6")
        self.plainTextEdit_4 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_4.setGeometry(QtCore.QRect(200, 260, 301, 41))
        self.plainTextEdit_4.setObjectName("plainTextEdit_4")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(270, 160, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_3.clicked.connect(self.signverif)
        self.pushButton_7.clicked.connect(self.browsefileverif)
        self.pushButton_6.clicked.connect(self.browsepubkey)
        self.pushButton_8.clicked.connect(self.browsesign)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt;\">Digital Signature Verification</span></p></body></html>"))
        self.pushButton_8.setText(_translate("MainWindow", "Browse"))
        self.label_10.setText(_translate("MainWindow", "File Sign"))
        self.pushButton_3.setText(_translate("MainWindow", "CHECK FILE"))
        self.label_7.setText(_translate("MainWindow", "File Key"))
        self.label_8.setText(_translate("MainWindow", "File Input"))
        self.pushButton_7.setText(_translate("MainWindow", "Browse"))
        self.pushButton_6.setText(_translate("MainWindow", "Browse"))
        self.label_14.setText(_translate("MainWindow", "Sign Verification"))

    def clicker(self):
        fname = QFileDialog.getOpenFileName(
            parent = MainWindow, 
            caption = "Open File",
            directory = "", 
            filter = "All Files (*)")
        if fname:
            return fname[0]
     

    def browsefileverif(self):
        link = self.clicker()
        self.plainTextEdit_5.setPlainText(link)

    def browsepubkey(self):
        link = self.clicker()
        self.plainTextEdit_4.setPlainText(link)    

    def browsesign(self):
        link = self.clicker()
        self.plainTextEdit_6.setPlainText(link)    

    def signverif(self):
        filename = self.plainTextEdit_5.toPlainText()
        filekey = self.plainTextEdit_4.toPlainText()
        filesign = self.plainTextEdit_6.toPlainText()
        
        if filename=="" or filekey=="":
            self.popupnotiferror("File name dan file key tidak boleh kosong!")

        else:
            if Baca_File.fileext(filename) == ".txt":
                if filesign != "":
                    self.popupnotiferror("Kosongkan file sign! \n.txt tidak perlu filesign")
                else:
                    if self.pubkeychecker(filekey) == True:
                        hasil = validateDigitalSigned(filename, filekey, filesign)
                        if hasil == "Valid":
                            self.popupnotifbiasa("File asli dan berhasil diverifikasi")
                        elif hasil == "Tidak Valid":
                            self.popupnotifwarning("Verifikasi gagal! \n File asli sudah berubah atau Anda salah memasukkan kunci")
                    else:
                        self.popupnotiferror("Masukkan kunci publik (dengan file .pub)!")

            else:
                if filesign == "":
                    self.popupnotiferror("Masukkan file sign!")
                else:
                    if self.pubkeychecker(filekey) == True:
                        hasil = validateDigitalSigned(filename, filekey, filesign)
                        if hasil == "Valid":
                            self.popupnotifbiasa("File asli dan berhasil diverifikasi")
                        elif hasil == "Tidak Valid":
                            self.popupnotifwarning("Verifikasi gagal! \n File asli sudah berubah atau Anda salah memasukkan kunci")
                    else:
                        self.popupnotiferror("Masukkan kunci publik (dengan file .pub)!")

    def popupnotifbiasa(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Information)

        x = msg.exec_()

    def popupnotifwarning(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Warning)

        x = msg.exec_()

    def popupnotiferror(self, kalimat):
        msg = QMessageBox()
        msg.setWindowTitle("Digital Signature")
        msg.setText(kalimat)
        msg.setIcon(QMessageBox.Critical)

        x = msg.exec_()    

    def pubkeychecker(self, file):
        if Baca_File.fileext(file) == ".pub":
            return True
        else:
            return False

    def prikeychecker(self, file):
        if Baca_File.fileext(file) == ".pri":
            return True
        else:
            return False


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
